
CS:APP Cache Lab: Grading Sheet for foo-handin.tar

Part 1: Compiling test framework

gcc -g -Wall -Werror -std=c99 -m64 -o csim csim.c cachelab.c -lm 
gcc -g -Wall -Werror -std=c99 -m64 -o csim-ref csim-ref.c cachelab.c -lm
gcc -g -Wall -Werror -std=c99 -m64 -o test-csim test-csim.c 
gcc -g -Wall -Werror -std=c99 -m64 -O0 -c trans.c
gcc -g -Wall -Werror -std=c99 -m64 -o test-trans test-trans.c cachelab.c trans.o 
gcc -g -Wall -Werror -std=c99 -m64 -O0 -o tracegen tracegen.c trans.o cachelab.c


Part 2: Running the driver

Part A: Testing cache simulator
Running ./test-csim
                        Your simulator     Reference simulator
Points (s,E,b)    Hits  Misses  Evicts    Hits  Misses  Evicts
     3 (1,1,1)       9       8       6       9       8       6  traces/yi2.trace
     3 (4,2,4)       4       5       2       4       5       2  traces/yi.trace
     3 (2,1,4)       2       3       1       2       3       1  traces/dave.trace
     3 (2,1,3)     167      71      67     167      71      67  traces/trans.trace
     3 (2,2,3)     201      37      29     201      37      29  traces/trans.trace
     3 (2,4,3)     212      26      10     212      26      10  traces/trans.trace
     3 (5,1,5)     231       7       0     231       7       0  traces/trans.trace
     6 (5,1,5)  265189   21775   21743  265189   21775   21743  traces/long.trace
    27


Part B: Testing transpose function
Running ./test-trans -M 32 -N 32
Running ./test-trans -M 64 -N 64
Running ./test-trans -M 61 -N 67

Cache Lab summary:
                        Points   Max pts      Misses
Csim correctness          27.0        27
Trans perf 32x32           6.9         8         343
Trans perf 64x64           1.8         8        1843
Trans perf 61x67           8.8        10        2118
          Total points    44.5        53

AUTORESULT_STRING=44.5:343:1843:2118


Part 3: Grade


Score : 44.5 / 53

Part 4: Handin files for foo-handin.tar


*** csim.c ***
/*   Cache Simulator
 *   Author: foo
 */

#include "cachelab.h"
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <getopt.h>
#include <string.h>
#include <math.h>

/* a cache_line has a valid bit, tag bits, and an LRU count */
typedef struct cache_line
{
  int valid;
  int tag;
  int lruCount;
} cache_line;

/*
   updateCache performs the "heavy lifting" of cache work. Determines hits,
   misses, and evicts and updates the information for the simulator.
*/
void updateCache(int v, int tag, int setIndex, int E, int* hits, int* misses,
                 int* evicts, int lruVal, struct cache_line** cache) {
  int i;
  /* Loop through the cache at the given setIndex */
  for(i = 0; i < E; i++)
    {
      if(cache[setIndex][i].valid && cache[setIndex][i].tag == tag)
	{
	  /* We have a hit */
	  cache[setIndex][i].lruCount = lruVal;
	  *hits = *hits + 1;

	  if(v)
	    printf(" hit");
	  return;
	}
    }

  /* We have a miss */
 *misses = *misses + 1;

  if(v)
    printf(" miss");

  /* We need to figure out if there is an empty spot to put the element into */
  int emptySpot = 0;
  for(i = 0; i < E; i++)
    {
      if(cache[setIndex][i].valid == 0)
	{
	  /* i is an empty spot */
	  cache[setIndex][i].valid = 1;
	  cache[setIndex][i].tag = tag;
	  cache[setIndex][i].lruCount = lruVal;
	  emptySpot = 1;
	  return;
	}
    }

  if(!emptySpot)
    {
      /* We know there wasn't an empty spot, so we must evict */
      int minLRU = cache[setIndex][0].lruCount;
      int indexToEvict = 0;
      for(i = 0; i < E; i++)
	{
	  if(cache[setIndex][i].lruCount < minLRU)
	    {
	      minLRU = cache[setIndex][i].lruCount;
	      indexToEvict = i;
	    }
	}

      cache[setIndex][indexToEvict].lruCount = lruVal;
      cache[setIndex][indexToEvict].tag = tag;
      cache[setIndex][indexToEvict].valid = 1;
      *evicts = *evicts + 1;

      if (v)
	printf(" eviction");
      return;
    }
}

/*
   getFileContents reads the lines of the trace and calls updateCache to
   perform the cache work
*/

void getFileContents(int v, int s, int E, int b, char* t, cache_line** cache)
{
  /* Open the file and perform the caching */
  char* operation = malloc(sizeof(int));
  long long* address = malloc(sizeof(long long));
  int* size = malloc(sizeof(int));

  long long tag;
  long long setIndex;

  int* hits = malloc(sizeof(int));
  int* misses = malloc(sizeof(int));
  int* evicts = malloc(sizeof(int));

  int lruVal = 0;

  FILE* filename;
  filename = fopen(t, "r");

  /* Only if the file is valid */
  if(filename) {
    while(fscanf(filename, " %c %llx,%d\n", operation, address, size) != EOF)
      {
	/* Determine which instruction we are looking at */
	if(*operation == 'I')
	  continue;
	else
	  {
	    if(v)
	      printf("%c %llx,%d", *operation, *address, *size);

	    /* Get the tag and setIndex bits */
	    tag = ((*address) >> (b + s));
	    setIndex = ((*address) >> b) & ((1 << s) - 1);

	    /* L and S are the same for our purposes */
	    updateCache(v, tag, setIndex, E, hits, misses, evicts,
			lruVal, cache);
	    lruVal++;

	    /* M is a load followed by a store */
	    if(operation[0] == 'M')
	      {
		updateCache(v, tag, setIndex, E, hits, misses, evicts,
			    lruVal, cache);
		lruVal++;
	      }
	  }

	if(v)
	  printf("\n");
      }
    fclose(filename);
  } else {
    printf("Could not open file");
    return;
  }
  printSummary(*hits, *misses, *evicts);

  free(hits);
  free(misses);
  free(evicts);
  free(operation);
  free(address);
  free(size);
  return;
}

int main(int argc, char *argv[])
{
  /* get the arguments given to the function */
  int v = 0;
  int s;
  int E;
  int b;
  char* t;
  int opt;

  while((opt = getopt( argc, argv, "vs:E:b:t:" )) != -1) {
    switch( opt ) {
    case 'v':
      v = 1;
      break;

    case 's':
      s = atoi(optarg);
      break;

    case 'E':
      E = atoi(optarg);
      break;

    case 'b':
      b = atoi(optarg);
      break;

    case 't':
      t = optarg;
      break;
    }
  }
  /* define the cache struct as a 2-D array of cache_lines */
  int numSets = pow(2, s);
  cache_line** cache = malloc(sizeof(cache_line) * numSets);
  int i = 0;
  for(i = 0; i < numSets; i++)
    cache[i] = malloc(sizeof(cache_line) * E);

  /* start getting and processing the file information */
  getFileContents(v, s, E, b, t, cache);

  for(i = 0; i < numSets; i++)
    free(cache[i]);
  free(cache);
  return 0;
}

*** trans.c ***
/*
 * trans.c - Matrix transpose B = A^T
 *
 * Each transpose function must have a prototype of the form:
 * void trans(int M, int N, int A[N][M], int B[M][N]);
 *
 * A transpose function is evaluated by counting the number of misses
 * on a 1KB direct mapped cache with a block size of 32 bytes.
 */
#include <stdio.h>
#include "cachelab.h"

int is_transpose(int M, int N, int A[N][M], int B[M][N]);

/*
 * transpose_submit - This is the solution transpose function that you
 *     will be graded on for Part B of the assignment. Do not change
 *     the description string "Transpose submission", as the driver
 *     searches for that string to identify the transpose function to
 *     be graded. 
 */

/*
 *  Author: foo
 */
void transpose_32x32(int M, int N, int A[N][M], int B[M][N]);
void transpose_64x64(int M, int N, int A[N][M], int B[M][N]);
void transpose_61x67(int M, int N, int A[N][M], int B[M][N]);

char transpose_submit_desc[] = "Transpose submission";
void transpose_submit(int M, int N, int A[N][M], int B[M][N])
{
  if(N == 32)
    transpose_32x32(M, N, A, B);

  else if(N == 64)
    transpose_64x64(M, N, A, B);

  else
    transpose_61x67(M, N, A, B);

}

/*
 * You can define additional transpose functions below. We've defined
 * a simple one below to help you get started.
 */

/* Transposes a 32x32 matrix */
void transpose_32x32(int M, int N, int A[N][M], int B[M][N]) {
  int blockRow, blockCol, inBlockRow, inBlockCol;

  for(blockRow = 0; blockRow < 32; blockRow = blockRow + 8) {
    for(blockCol = 0; blockCol < 32; blockCol = blockCol + 8) {
      for(inBlockRow = blockRow; inBlockRow < blockRow + 8; inBlockRow++) {
	for(inBlockCol = blockCol; inBlockCol < blockCol + 8; inBlockCol++) {
	  B[inBlockCol][inBlockRow] = A[inBlockRow][inBlockCol];
	}
      }
    }
  }
}

/* Transposes a 64x64 matrix */
void transpose_64x64(int M, int N, int A[N][M], int B[M][N]) {
  int blockRow, blockCol, inBlockRow, inBlockCol;

  for(blockRow = 0; blockRow < 64; blockRow = blockRow + 8) {
    for(blockCol = 0; blockCol < 64; blockCol = blockCol + 4) {
      for(inBlockRow = blockRow;
	  inBlockRow < blockRow + 8 && inBlockRow < 64; inBlockRow++) {
	for(inBlockCol = blockCol;
	    inBlockCol < blockCol + 4 && inBlockCol < 64; inBlockCol++) {
	  B[inBlockCol][inBlockRow] = A[inBlockRow][inBlockCol];
	}
      }
    }
  }
}

/* Transposes a 61x67 matrix */
void transpose_61x67(int M, int N, int A[N][M], int B[M][N]) {
  int blockRow, blockCol, inBlockRow, inBlockCol;

  for(blockRow = 0; blockRow < 67; blockRow = blockRow + 8) {
    for(blockCol = 0; blockCol < 61; blockCol = blockCol + 8) {
      for(inBlockRow = blockRow;
	  inBlockRow < blockRow + 8 && inBlockRow < 67; inBlockRow++) {
	for(inBlockCol = blockCol;
	    inBlockCol < blockCol + 8 && inBlockCol < 61; inBlockCol++) {
	  B[inBlockCol][inBlockRow] = A[inBlockRow][inBlockCol];
	}
      }
    }
  }
}

/*
 * trans - A simple baseline transpose function, not optimized for the cache.
 */
char trans_desc[] = "Simple row-wise scan transpose";
void trans(int M, int N, int A[N][M], int B[M][N])
{
    int i, j, tmp;

    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            tmp = A[i][j];
            B[j][i] = tmp;
        }
    }
}


/*
 * registerFunctions - This function registers your transpose
 *     functions with the driver.  At runtime, the driver will
 *     evaluate each of the registered functions and summarize their
 *     performance. This is a handy way to experiment with different
 *     transpose strategies.
 */
void registerFunctions()
{
	/* Register your solution function */
    registerTransFunction(transpose_submit, transpose_submit_desc);

    /* Register any additional transpose functions */
    registerTransFunction(trans, trans_desc);

}

/*
 * is_transpose - This helper function checks if B is the transpose of
 *     A. You can check the correctness of your transpose by calling
 *     it before returning from the transpose function.
 */
int is_transpose(int M, int N, int A[N][M], int B[M][N])
{
    int i, j;

    for (i = 0; i < N; i++) {
        for (j = 0; j < M; ++j) {
			if (A[i][j] != B[j][i]) {
				return 0;
			}
		}
    }
    return 1;
}

